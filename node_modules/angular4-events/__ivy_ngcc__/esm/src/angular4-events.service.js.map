{"version":3,"file":"angular4-events.service.js","sources":["../../../src/angular4-events.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAA4B,MAAM,MAAM,CAAC;AAEzD,IAAM,WAAW,GAAW,gBAAgB,CAAC;AAG7C;AAAiD,IAG7C;AAEK,QAJG,WAAM,GAAG,EAAE,CAAC;AACxB,IACmB,CAAC;AACpB,IAKW,iCAAS,GAAhB,UAAiB,KAAa,EAAE,QAA+B,EAAE,KAA4B,EAAE,QAAqB;AACxH,QAAQ,IAAI,CAAC,KAAK,EAAE;AACpB,YAAY,MAAM,IAAI,KAAK,CAAC,MAAI,WAAW,kDAA+C,CAAC,CAAC;AAC5F,SAAS;AACT,QACQ,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,SAAS,EAAE;AAC9C,YAAY,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,OAAO,EAAO,CAAC;AACpD,SAAS;AACT,QACQ,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AAC5C,YAAY,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,YAAY,EAAE,CAAC;AACrD,SAAS;AACT,aAAa;AACb,YAAY,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AAC1F,SAAS;AACT,IAAI,CAAC;AAEL,IAAW,+BAAO,GAAd,UAAe,KAAa,EAAE,WAAiB;AAAI,QAC/C,IAAI,CAAC,KAAK,EAAE;AACpB,YAAY,MAAM,IAAI,KAAK,CAAC,MAAI,WAAW,6CAA0C,CAAC,CAAC;AACvF,SAAS;AACT,aAAa,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;AACtC,YAAY,OAAO;AACnB,SAAS;AACT,QACQ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC7C,IAAI,CAAC;AACJ,IApCY,aAAa,wBADzB,UAAU,EAAE,rBACL;AAAqC,OAAhC,aAAa,CAoCzB;;;;;gDACD;AACA,IAFA,oBAAC;AAED,CAFC,AApCD,IAoCC;AACD,SArCa,aAAa;AAAI","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject, Observable, Subscription } from 'rxjs';\n\nconst ServiceName: string = \"Events Service\";\n\n@Injectable()\nexport class EventsService implements IEventsService {\n    private events = {};\n\n    constructor() {}\n\n    public subscribe(event: string): Observable<any>;\n    public subscribe(event: string, callback: (value: any) => void): Subscription;\n    public subscribe(event: string, callback: (value: any) => void, error: (error: any) => void): Subscription;\n    public subscribe(event: string, callback: (value: any) => void, error: (error: any) => void, complete: () => void): Subscription;\n    public subscribe(event: string, callback?: (value: any) => void, error?: (error: any) => void, complete?: () => void) {\n        if (!event) {\n            throw new Error(`[${ServiceName}] => Subscription method must get event name.`);\n        }\n\n        if (this.events[event] === undefined) {\n            this.events[event] = new Subject<any>();\n        }\n\n        if (typeof callback !== 'function') {\n            return this.events[event].asObservable();\n        }\n        else {\n            return this.events[event].asObservable().subscribe(callback, error, complete);\n        }\n    }\n\n    public publish(event: string, eventObject?: any): void {\n        if (!event) {\n            throw new Error(`[${ServiceName}] => Publish method must get event name.`);\n        }\n        else if (!this.events[event]) {\n            return;\n        }\n\n        this.events[event].next(eventObject);\n    }\n}\n\nexport interface IEventsService {\n    publish(event: string, eventObject?: any): void;\n    subscribe(event: string): Observable<any>;\n    subscribe(event: string, callback: (value: any) => void): Subscription;\n    subscribe(event: string, callback: (value: any) => void, error: (error: any) => void): Subscription;\n    subscribe(event: string, callback: (value: any) => void, error: (error: any) => void, complete: () => void): Subscription;\n}\n\ninterface ISubscribe{\n    (event: string): Observable<any>;\n    (event: string, callback: (value: any) => void): Subscription;\n    (event: string, callback: (value: any) => void, error: (error: any) => void): Subscription;\n    (event: string, callback: (value: any) => void, error: (error: any) => void, complete: () => void): Subscription;\n}"]}