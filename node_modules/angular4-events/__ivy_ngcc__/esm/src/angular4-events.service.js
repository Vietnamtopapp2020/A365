import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
var ServiceName = "Events Service";
var EventsService = /** @class */ (function () {
    function EventsService() {
        this.events = {};
    }
    EventsService.prototype.subscribe = function (event, callback, error, complete) {
        if (!event) {
            throw new Error("[" + ServiceName + "] => Subscription method must get event name.");
        }
        if (this.events[event] === undefined) {
            this.events[event] = new Subject();
        }
        if (typeof callback !== 'function') {
            return this.events[event].asObservable();
        }
        else {
            return this.events[event].asObservable().subscribe(callback, error, complete);
        }
    };
    EventsService.prototype.publish = function (event, eventObject) {
        if (!event) {
            throw new Error("[" + ServiceName + "] => Publish method must get event name.");
        }
        else if (!this.events[event]) {
            return;
        }
        this.events[event].next(eventObject);
    };
    EventsService = __decorate([ __metadata("design:paramtypes", [])
    ], EventsService);
EventsService.ɵfac = function EventsService_Factory(t) { return new (t || EventsService)(); };
EventsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: EventsService, factory: function (t) { return EventsService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EventsService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return EventsService;
}());
export { EventsService };

//# sourceMappingURL=angular4-events.service.js.map